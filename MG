import torch
from torch.optim import Optimizer
# import wandb
import numpy as np
class CYADAM(Optimizer):
    def __init__(self, params, lr=1e-3, momentum=0.9, dampening=0, weight_decay=0, nesterov=False):
        if lr < 0.0:
            raise ValueError("Invalid learning rate: {}".format(lr))
        if momentum < 0.0:
            raise ValueError("Invalid momentum value: {}".format(momentum))
        if weight_decay < 0.0:
            raise ValueError("Invalid weight_decay value: {}".format(weight_decay))

        defaults = dict(lr=lr, momentum=momentum, dampening=dampening,
                        weight_decay=weight_decay, nesterov=nesterov)
        super(CYADAM, self).__init__(params, defaults)

    def step(self, closure=None):
        """Performs a single optimization step."""
        loss = None
        if closure is not None:
            loss = closure()
        for group in self.param_groups:
            weight_decay = group['weight_decay']
            momentum = group['momentum']
            dampening = group['dampening']
            nesterov = group['nesterov']
            lr = group['lr']
            for p in group['params']:
                if p.grad is None:
                    continue
                d_p = p.grad.data

                if weight_decay != 0:
                    d_p.add_(weight_decay, p.data)
                if momentum != 0:
                    param_state = self.state[p]
                    if 'momentum_buffer' not in param_state:
                        buf = param_state['momentum_buffer'] = torch.clone(d_p).detach()
                    else:
                        buf = param_state['momentum_buffer']
                        buf.mul_(momentum).add_(d_p, alpha=1 - dampening)

                    d_p=buf #????????
                    # d_p.add(buf, alpha=momentum)
                    p.grad[(p.grad >= -1e-1) & (p.grad <= 0)] = -1e-1
                    p.grad[(p.grad > 0) & (p.grad <= 1e-1)] = 1e-1
                    # buffer[buffer == 0] = 1e-7
                    # p.grad[p.grad==0]=1e-7

                    # ratio = d_p/buf *abs(buf[0,0])
                    ratio = d_p/p.grad
                    # ratio[ratio<0]=abs(ratio).min()
                    # ratio[ratio < 0] = ratio[ratio < 0]/ratio[ratio < 0].min()
                    # ratio[ratio < 0] = 0.0001
                    # ratio[ratio < 0] = ratio[ratio < 0] -ratio.min()+1e-3
                    ratio[ratio < 0] = -(ratio[ratio < 0])/10
                    ratio_norm = ((ratio - ratio.min()) / (ratio.max() - ratio.min()+ 1e-7))*90

                    # print("buffer------------", buffer)
                    # print("d_p------------", d_p)
                    # print("ratio------------", ratio)
                    # print("ratio_norm------------", ratio_norm)
                # wandb.log({
                #     'lr': group['lr'],
                # })
                p.data.add_(d_p*ratio_norm, alpha=-lr)
                # p.data.add_(d_p, alpha=-lr)

        return loss
